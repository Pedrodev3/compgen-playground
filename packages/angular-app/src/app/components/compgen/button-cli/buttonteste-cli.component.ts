import { Component, Input, Output, EventEmitter, ElementRef, ViewChild, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * ButtonTestCli Button Component
 * Generated by CompGen CLI on 2025-09-30T23:12:40.664Z
 * @author CompGen
 * 
 * ðŸ”§ ElementRef Integration:
 * - Direct DOM access for dynamic class manipulation
 * - Perfect for Tailwind CSS utility classes
 * - Provides native Angular DOM interaction patterns
 */
@Component({
  selector: 'app-button-test-cli',
  templateUrl: './buttonteste-cli.component.html',
  styleUrls: ['./buttonteste-cli.component.css'],
  standalone: true,
  imports: [CommonModule]
})
export class ButtonTestCliComponent implements AfterViewInit {
  @Input() text: string = 'Click me';
  @Input() variant: 'primary' | 'secondary' | 'danger' | 'success' = 'primary';
  @Input() size: 'small' | 'medium' | 'large' = 'medium';
  @Input() disabled: boolean = false;
  @Input() loading: boolean = false;
  @Input() type: 'button' | 'submit' | 'reset' = 'button';
  
  @Output() buttonClick = new EventEmitter<MouseEvent>();

  // ï¿½ ElementRef for direct DOM access
  @ViewChild('buttonElement', { static: true }) buttonElementRef!: ElementRef<HTMLButtonElement>;

  // ï¿½ðŸŽ¨ Custom styling from CompGen
  customBackgroundColor = '#007bff';
  customTextColor = '#343a40';
  customFocusColor = '#0056b3';

  constructor(private elementRef: ElementRef<HTMLElement>) {}

  onClick(event: MouseEvent): void {
    if (!this.disabled && !this.loading) {
      this.buttonClick.emit(event);
    }
  }

  get buttonClasses(): string {
    const baseClasses = 'font-semibold rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed';
    
    const variantClasses = {
      primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',
      secondary: 'bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500',
      danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
      success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-500'
    };

    const sizeClasses = {
      small: 'px-3 py-1.5 text-sm',
      medium: 'px-4 py-2 text-base',
      large: 'px-6 py-3 text-lg'
    };

    return `${baseClasses} ${variantClasses[this.variant]} ${sizeClasses[this.size]}`;
  }

  get customStyles(): { [key: string]: string } {
    return {
      'background-color': this.customBackgroundColor,
      'color': this.customTextColor,
      'border-color': this.customBackgroundColor,
      '--focus-ring-color': this.customFocusColor
    };
  }

  // ðŸ”§ Lifecycle hook for ElementRef initialization
  ngAfterViewInit(): void {
    // ElementRef is now available for DOM manipulation
    this.applyInitialDomEnhancements();
  }

  // ðŸŽ¯ DOM Manipulation Utilities via ElementRef

  /**
   * Get the native HTML button element
   */
  get nativeElement(): HTMLButtonElement {
    return this.buttonElementRef.nativeElement;
  }

  /**
   * Get the component's root element
   */
  get hostElement(): HTMLElement {
    return this.elementRef.nativeElement;
  }

  /**
   * Add Tailwind CSS classes dynamically
   */
  addTailwindClasses(...classes: string[]): void {
    const element = this.nativeElement;
    classes.forEach(cls => element.classList.add(cls));
  }

  /**
   * Remove Tailwind CSS classes dynamically
   */
  removeTailwindClasses(...classes: string[]): void {
    const element = this.nativeElement;
    classes.forEach(cls => element.classList.remove(cls));
  }

  /**
   * Toggle Tailwind CSS classes dynamically
   */
  toggleTailwindClasses(...classes: string[]): void {
    const element = this.nativeElement;
    classes.forEach(cls => element.classList.toggle(cls));
  }

  /**
   * Apply hover effect classes
   */
  applyHoverEffect(hoverClasses: string[]): void {
    const element = this.nativeElement;
    element.addEventListener('mouseenter', () => {
      this.addTailwindClasses(...hoverClasses);
    });
    element.addEventListener('mouseleave', () => {
      this.removeTailwindClasses(...hoverClasses);
    });
  }

  /**
   * Apply focus effect classes
   */
  applyFocusEffect(focusClasses: string[]): void {
    const element = this.nativeElement;
    element.addEventListener('focus', () => {
      this.addTailwindClasses(...focusClasses);
    });
    element.addEventListener('blur', () => {
      this.removeTailwindClasses(...focusClasses);
    });
  }

  /**
   * Set custom CSS properties via ElementRef
   */
  setCustomProperty(property: string, value: string): void {
    this.nativeElement.style.setProperty(property, value);
  }

  /**
   * Get computed styles
   */
  getComputedStyle(): CSSStyleDeclaration {
    return window.getComputedStyle(this.nativeElement);
  }

  /**
   * Apply animation classes with duration
   */
  animateWithClasses(animationClasses: string[], duration: number = 300): Promise<void> {
    return new Promise((resolve) => {
      this.addTailwindClasses(...animationClasses);
      setTimeout(() => {
        this.removeTailwindClasses(...animationClasses);
        resolve();
      }, duration);
    });
  }

  /**
   * Initial DOM enhancements after view init
   */
  private applyInitialDomEnhancements(): void {
    // Example: Add data attributes for analytics or testing
    this.nativeElement.setAttribute('data-component', 'button-test-cli');
    this.nativeElement.setAttribute('data-variant', this.variant);
    this.nativeElement.setAttribute('data-size', this.size);
    
    // Example: Apply initial accessibility enhancements
    if (!this.nativeElement.getAttribute('aria-label')) {
      this.nativeElement.setAttribute('aria-label', this.text);
    }
  }
}

/**
 * ðŸŽ¯ USAGE EXAMPLES:
 * 
 * // Get reference in parent component
 * @ViewChild(MyButtonComponent) buttonComponent!: MyButtonComponent;
 * 
 * // Dynamic class manipulation
 * this.buttonComponent.addTailwindClasses('bg-red-500', 'text-white');
 * this.buttonComponent.removeTailwindClasses('bg-blue-500');
 * 
 * // Animation
 * await this.buttonComponent.animateWithClasses(['animate-pulse'], 500);
 * 
 * // Custom properties
 * this.buttonComponent.setCustomProperty('--custom-shadow', '0 4px 6px rgba(0,0,0,0.1)');
 * 
 * // Direct DOM access
 * const buttonElement = this.buttonComponent.nativeElement;
 * const styles = this.buttonComponent.getComputedStyle();
 */
