import { ComponentFixture, TestBed } from "@angular/core/testing";
import { ButtonTeste1ButtonComponent } from "./buttonteste-cli.component";

/**
 * ButtonTeste1 Button Component Tests
 * Generated by CompGen CLI on 2025-09-30T23:12:40.664Z
 * @author CompGen
 */

describe("ButtonTeste1ButtonComponent", () => {
  let component: ButtonTeste1ButtonComponent;
  let fixture: ComponentFixture<ButtonTeste1ButtonComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ButtonTeste1ButtonComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(ButtonTeste1ButtonComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it("should create", () => {
    expect(component).toBeTruthy();
  });

  it("should display default text", () => {
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector("button")?.textContent?.trim()).toBe(
      "Click me"
    );
  });

  it("should accept custom text input", () => {
    const customText = "Custom Button";
    component.text = customText;
    fixture.detectChanges();

    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector("button")?.textContent?.trim()).toBe(
      customText
    );
  });

  it("should apply correct variant classes", () => {
    component.variant = "primary";
    fixture.detectChanges();

    const button = fixture.nativeElement.querySelector("button");
    expect(button?.classList.contains("bg-blue-600")).toBeTruthy();
  });

  it("should apply correct size classes", () => {
    component.size = "large";
    fixture.detectChanges();

    const button = fixture.nativeElement.querySelector("button");
    expect(button?.classList.contains("px-6")).toBeTruthy();
    expect(button?.classList.contains("py-3")).toBeTruthy();
  });

  it("should emit buttonClick event when clicked", () => {
    spyOn(component.buttonClick, "emit");

    const button = fixture.nativeElement.querySelector("button");
    button?.click();

    expect(component.buttonClick.emit).toHaveBeenCalled();
  });

  it("should not emit event when disabled", () => {
    component.disabled = true;
    fixture.detectChanges();

    spyOn(component.buttonClick, "emit");

    const button = fixture.nativeElement.querySelector("button");
    button?.click();

    expect(component.buttonClick.emit).not.toHaveBeenCalled();
  });

  it("should show loading spinner when loading", () => {
    component.loading = true;
    fixture.detectChanges();

    const spinner = fixture.nativeElement.querySelector(".animate-spin");
    expect(spinner).toBeTruthy();
  });

  it("should be disabled when loading", () => {
    component.loading = true;
    fixture.detectChanges();

    const button = fixture.nativeElement.querySelector("button");
    expect(button?.disabled).toBeTruthy();
  });

  it("should have correct accessibility attributes", () => {
    const button = fixture.nativeElement.querySelector("button");
    expect(button?.getAttribute("aria-label")).toBe("Click me");
  });
});
