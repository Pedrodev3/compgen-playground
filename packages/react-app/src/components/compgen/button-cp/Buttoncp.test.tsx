import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import buttonCpButton from './buttoncp-button.component';

/**
 * buttonCp Button Component Tests
 * Generated by CompGen CLI on 2025-10-01T16:50:09.291Z
 * @author CompGen
 */

describe('buttonCpButton', () => {
  it('renders with default props', () => {
    render(<buttonCpButton>Click me</buttonCpButton>);
    const button = screen.getByRole('button');
    expect(button).toBeInTheDocument();
    expect(button).toHaveTextContent('Click me');
  });

  it('applies correct Bootstrap variant classes', () => {
    render(<buttonCpButton variant="primary">Primary</buttonCpButton>);
    const button = screen.getByRole('button');
    expect(button).toHaveClass('btn-primary');
  });

  it('applies correct Bootstrap size classes', () => {
    render(<buttonCpButton size="lg">Large</buttonCpButton>);
    const button = screen.getByRole('button');
    expect(button).toHaveClass('btn-lg');
  });

  it('applies outline variant when outline is true', () => {
    render(<buttonCpButton variant="primary" outline>Outline</buttonCpButton>);
    const button = screen.getByRole('button');
    expect(button).toHaveClass('btn-outline-primary');
  });

  it('applies block class when block is true', () => {
    render(<buttonCpButton block>Block</buttonCpButton>);
    const button = screen.getByRole('button');
    expect(button).toHaveClass('btn-block');
  });

  it('shows loading spinner when loading', () => {
    render(<buttonCpButton loading>Loading</buttonCpButton>);
    const button = screen.getByRole('button');
    expect(button).toBeDisabled();
    expect(button.querySelector('.spinner-border')).toBeInTheDocument();
  });

  it('is disabled when disabled prop is true', () => {
    render(<buttonCpButton disabled>Disabled</buttonCpButton>);
    const button = screen.getByRole('button');
    expect(button).toBeDisabled();
  });

  it('handles click events', () => {
    const handleClick = jest.fn();
    render(<buttonCpButton onClick={handleClick}>Click me</buttonCpButton>);
    const button = screen.getByRole('button');
    fireEvent.click(button);
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
