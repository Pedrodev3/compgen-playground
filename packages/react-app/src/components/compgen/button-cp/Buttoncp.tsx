import React, { useRef, useEffect } from 'react';
import { ButtonHTMLAttributes } from 'react';
import './buttoncp-button.component.css';

/**
 * buttonCp Button Component (Bootstrap)
 * Generated by CompGen CLI on 2025-10-01T16:50:09.291Z
 * @author CompGen
 * 
 * Features:
 * - Bootstrap 5 integration
 * - Custom colors via CSS variables
 * - Direct DOM access with useRef
 * - Loading states with Bootstrap spinner
 * - Full accessibility support
 * - TypeScript interfaces
 */

interface buttonCpButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'custom';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
  outline?: boolean;
  block?: boolean;
  children?: React.ReactNode;
  // ðŸŽ¨ Custom color props
  backgroundColor?: string;
  textColor?: string;
  hoverColor?: string;
  // ðŸŽ¯ Direct DOM Access
  onMount?: (element: HTMLButtonElement) => void;
  onUnmount?: (element: HTMLButtonElement) => void;
}

const buttonCpButton: React.FC<buttonCpButtonProps> = ({
  variant = 'custom',
  size = 'md',
  loading = false,
  outline = false,
  block = false,
  disabled = false,
  children,
  className = '',
  backgroundColor = '#ffc107',
  textColor = '#007bff',
  hoverColor = '#0056b3',
  onMount,
  onUnmount,
  ...props
}) => {
  // ðŸŽ¯ Direct DOM Access
  const buttonRef = useRef<HTMLButtonElement>(null);

  useEffect(() => {
    const button = buttonRef.current;
    if (button && onMount) {
      onMount(button);
    }

    return () => {
      if (button && onUnmount) {
        onUnmount(button);
      }
    };
  }, [onMount, onUnmount]);

  const baseClasses = 'btn';
  const variantClass = variant === 'custom' ? 'btn-custom' : (outline ? `btn-outline-${variant}` : `btn-${variant}`);
  const sizeClass = size !== 'md' ? `btn-${size}` : '';
  const blockClass = block ? 'btn-block' : '';
  
  const buttonClasses = [
    baseClasses,
    variantClass,
    sizeClass,
    blockClass,
    className
  ].filter(Boolean).join(' ');

  // ðŸŽ¨ Custom styles for dynamic colors
  const customStyles: React.CSSProperties = variant === 'custom' ? {
    backgroundColor,
    borderColor: backgroundColor,
    color: textColor,
  } : {};

  // ðŸŽ¨ Apply dynamic hover styles via CSS variables
  useEffect(() => {
    const button = buttonRef.current;
    if (button && variant === 'custom') {
      button.style.setProperty('--bs-btn-hover-bg', hoverColor);
      button.style.setProperty('--bs-btn-hover-border-color', hoverColor);
      button.style.setProperty('--bs-btn-active-bg', hoverColor);
      button.style.setProperty('--bs-btn-active-border-color', hoverColor);
    }
  }, [variant, hoverColor]);

  return (
    <button
      ref={buttonRef}
      className={buttonClasses}
      style={customStyles}
      disabled={disabled || loading}
      aria-label={typeof children === 'string' ? children : 'Click me'}
      {...props}
    >
      {loading && (
        <span 
          className="spinner-border spinner-border-sm me-2" 
          role="status" 
          aria-hidden="true"
          aria-label="Loading"
        />
      )}
      <span className={loading ? 'visually-hidden' : ''}>
        {children || 'Click me'}
      </span>
    </button>
  );
};

export default buttonCpButton;
