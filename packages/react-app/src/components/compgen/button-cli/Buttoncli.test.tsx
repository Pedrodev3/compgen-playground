import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import buttonCliButton from './buttoncli-button.component';

/**
 * buttonCli Button Component Tests
 * Generated by CompGen CLI on 2025-10-01T16:48:36.414Z
 * @author CompGen
 */

describe('buttonCliButton', () => {
  it('renders with default props', () => {
    render(<buttonCliButton>Click me</buttonCliButton>);
    const button = screen.getByRole('button');
    expect(button).toBeInTheDocument();
    expect(button).toHaveTextContent('Click me');
  });

  it('applies correct variant classes', () => {
    render(<buttonCliButton variant="primary">Primary</buttonCliButton>);
    const button = screen.getByRole('button');
    expect(button).toHaveClass('bg-blue-600');
  });

  it('applies correct size classes', () => {
    render(<buttonCliButton size="large">Large</buttonCliButton>);
    const button = screen.getByRole('button');
    expect(button).toHaveClass('px-6', 'py-3', 'text-base');
  });

  it('shows loading spinner when loading', () => {
    render(<buttonCliButton loading>Loading</buttonCliButton>);
    const button = screen.getByRole('button');
    expect(button).toBeDisabled();
    expect(button.querySelector('svg')).toBeInTheDocument();
  });

  it('applies full width when specified', () => {
    render(<buttonCliButton fullWidth>Full Width</buttonCliButton>);
    const button = screen.getByRole('button');
    expect(button).toHaveClass('w-full');
  });

  it('is disabled when disabled prop is true', () => {
    render(<buttonCliButton disabled>Disabled</buttonCliButton>);
    const button = screen.getByRole('button');
    expect(button).toBeDisabled();
  });

  it('handles click events', () => {
    const handleClick = jest.fn();
    render(<buttonCliButton onClick={handleClick}>Click me</buttonCliButton>);
    const button = screen.getByRole('button');
    fireEvent.click(button);
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('does not fire click when disabled', () => {
    const handleClick = jest.fn();
    render(<buttonCliButton disabled onClick={handleClick}>Disabled</buttonCliButton>);
    const button = screen.getByRole('button');
    fireEvent.click(button);
    expect(handleClick).not.toHaveBeenCalled();
  });

  it('does not fire click when loading', () => {
    const handleClick = jest.fn();
    render(<buttonCliButton loading onClick={handleClick}>Loading</buttonCliButton>);
    const button = screen.getByRole('button');
    fireEvent.click(button);
    expect(handleClick).not.toHaveBeenCalled();
  });
});
