import React, { useRef, useEffect } from 'react';
import { ButtonHTMLAttributes } from 'react';

/**
 * buttonCli Button Component (Tailwind CSS)
 * Generated by CompGen CLI on 2025-10-01T16:48:36.414Z
 * @author CompGen
 * 
 * Features:
 * - Tailwind CSS utility classes
 * - Custom colors via inline styles and CSS variables
 * - Direct DOM access with useRef
 * - Loading states with Tailwind animations
 * - Responsive design with Tailwind breakpoints
 * - Dark mode support
 * - TypeScript interfaces
 */

interface buttonCliButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'custom';
  size?: 'small' | 'medium' | 'large';
  loading?: boolean;
  fullWidth?: boolean;
  children?: React.ReactNode;
  // ðŸŽ¨ Custom color props
  backgroundColor?: string;
  textColor?: string;
  hoverColor?: string;
  // ðŸŽ¯ Direct DOM Access
  onMount?: (element: HTMLButtonElement) => void;
  onUnmount?: (element: HTMLButtonElement) => void;
}

const buttonCliButton: React.FC<buttonCliButtonProps> = ({
  variant = 'custom',
  size = 'medium',
  loading = false,
  fullWidth = false,
  disabled = false,
  children,
  className = '',
  backgroundColor = '#dc3545',
  textColor = '#28a745',
  hoverColor = '#e0a800',
  onMount,
  onUnmount,
  style,
  ...props
}) => {
  // ðŸŽ¯ Direct DOM Access
  const buttonRef = useRef<HTMLButtonElement>(null);

  useEffect(() => {
    const button = buttonRef.current;
    if (button && onMount) {
      onMount(button);
    }

    return () => {
      if (button && onUnmount) {
        onUnmount(button);
      }
    };
  }, [onMount, onUnmount]);

  const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed relative';
  
  const sizeClasses = {
    small: 'px-3 py-1.5 text-sm min-h-[2rem]',
    medium: 'px-4 py-2 text-sm min-h-[2.5rem]',
    large: 'px-6 py-3 text-base min-h-[3rem]'
  };
  
  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 hover:-translate-y-0.5 hover:shadow-lg',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500 hover:-translate-y-0.5 hover:shadow-lg',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 hover:-translate-y-0.5 hover:shadow-lg',
    success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500 hover:-translate-y-0.5 hover:shadow-lg',
    warning: 'bg-yellow-600 text-white hover:bg-yellow-700 focus:ring-yellow-500 hover:-translate-y-0.5 hover:shadow-lg',
    info: 'bg-cyan-600 text-white hover:bg-cyan-700 focus:ring-cyan-500 hover:-translate-y-0.5 hover:shadow-lg',
    custom: 'hover:-translate-y-0.5 hover:shadow-lg focus:ring-blue-500'
  };
  
  const fullWidthClasses = fullWidth ? 'w-full' : '';
  const loadingClasses = loading ? 'text-transparent pointer-events-none' : '';
  
  const buttonClasses = [
    baseClasses,
    sizeClasses[size],
    variantClasses[variant],
    fullWidthClasses,
    loadingClasses,
    className
  ].filter(Boolean).join(' ');

  // ðŸŽ¨ Custom styles for dynamic colors
  const customStyles: React.CSSProperties = {
    ...style,
    ...(variant === 'custom' ? {
      backgroundColor,
      color: textColor,
      borderColor: backgroundColor,
    } : {})
  };

  // ðŸŽ¨ Apply hover color on mouse events for custom variant
  const handleMouseEnter = (e: React.MouseEvent<HTMLButtonElement>) => {
    if (variant === 'custom' && !disabled && !loading) {
      e.currentTarget.style.backgroundColor = hoverColor;
      e.currentTarget.style.borderColor = hoverColor;
    }
    props.onMouseEnter?.(e);
  };

  const handleMouseLeave = (e: React.MouseEvent<HTMLButtonElement>) => {
    if (variant === 'custom' && !disabled && !loading) {
      e.currentTarget.style.backgroundColor = backgroundColor;
      e.currentTarget.style.borderColor = backgroundColor;
    }
    props.onMouseLeave?.(e);
  };

  return (
    <button
      ref={buttonRef}
      className={buttonClasses}
      style={customStyles}
      disabled={disabled || loading}
      aria-label={typeof children === 'string' ? children : 'Click me'}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      {...props}
    >
      {loading && (
        <div className="absolute inset-0 flex items-center justify-center">
          <svg
            className="animate-spin h-4 w-4 text-current"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            role="status"
            aria-label="Loading"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            />
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            />
          </svg>
        </div>
      )}
      <span className={loading ? 'opacity-0' : ''}>
        {children || 'Click me'}
      </span>
    </button>
  );
};

export default buttonCliButton;
