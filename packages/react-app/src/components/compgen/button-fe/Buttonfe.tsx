import React, { useRef, useEffect } from 'react';
import { ButtonHTMLAttributes } from 'react';
import './buttonfe-button.component.scss';

/**
 * buttonFe Button Component (SCSS)
 * Generated by CompGen CLI on 2025-10-01T16:49:30.406Z
 * @author CompGen
 * 
 * Features:
 * - SCSS styling with variables and mixins
 * - Custom colors via props and CSS variables
 * - Direct DOM access with useRef
 * - Loading states with SCSS animations
 * - BEM methodology for CSS classes
 * - TypeScript interfaces
 */

interface buttonFeButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'custom';
  size?: 'small' | 'medium' | 'large';
  loading?: boolean;
  fullWidth?: boolean;
  children?: React.ReactNode;
  // ðŸŽ¨ Custom color props
  backgroundColor?: string;
  textColor?: string;
  hoverColor?: string;
  // ðŸŽ¯ Direct DOM Access
  onMount?: (element: HTMLButtonElement) => void;
  onUnmount?: (element: HTMLButtonElement) => void;
}

const buttonFeButton: React.FC<buttonFeButtonProps> = ({
  variant = 'custom',
  size = 'medium',
  loading = false,
  fullWidth = false,
  disabled = false,
  children,
  className = '',
  backgroundColor = '#6f42c1',
  textColor = '#000000',
  hoverColor = '#c82333',
  onMount,
  onUnmount,
  ...props
}) => {
  // ðŸŽ¯ Direct DOM Access
  const buttonRef = useRef<HTMLButtonElement>(null);

  useEffect(() => {
    const button = buttonRef.current;
    if (button && onMount) {
      onMount(button);
    }

    return () => {
      if (button && onUnmount) {
        onUnmount(button);
      }
    };
  }, [onMount, onUnmount]);

  const baseClasses = 'button-fe-button';
  const variantClass = `${baseClasses}--${variant}`;
  const sizeClass = `${baseClasses}--${size}`;
  const fullWidthClass = fullWidth ? `${baseClasses}--full-width` : '';
  const loadingClass = loading ? `${baseClasses}--loading` : '';
  const disabledClass = disabled ? `${baseClasses}--disabled` : '';
  
  const buttonClasses = [
    baseClasses,
    variantClass,
    sizeClass,
    fullWidthClass,
    loadingClass,
    disabledClass,
    className
  ].filter(Boolean).join(' ');

  // ðŸŽ¨ Custom styles for dynamic colors
  const customStyles: React.CSSProperties = variant === 'custom' ? {
    '--btn-bg-color': backgroundColor,
    '--btn-text-color': textColor,
    '--btn-hover-color': hoverColor,
  } as React.CSSProperties : {};

  return (
    <button
      ref={buttonRef}
      className={buttonClasses}
      style={customStyles}
      disabled={disabled || loading}
      aria-label={typeof children === 'string' ? children : 'Click me'}
      {...props}
    >
      {loading && (
        <span 
          className={`${baseClasses}__spinner`}
          role="status" 
          aria-label="Loading"
        />
      )}
      <span className={`${baseClasses}__text ${loading ? `${baseClasses}__text--hidden` : ''}`}>
        {children || 'Click me'}
      </span>
    </button>
  );
};

export default buttonFeButton;
