/*
 * buttonFe Button SCSS Styles
 * Generated by CompGen CLI on 2025-10-01T16:49:30.406Z
 * Author: CompGen
 * 
 * ðŸŽ¨ Features:
 * - SCSS variables and mixins for customization
 * - BEM methodology for maintainable CSS
 * - CSS custom properties for dynamic colors
 * - Responsive design with breakpoints
 * - Accessibility support
 * - Loading states with animations
 */

// SCSS Variables
$btn-padding-small: 0.375rem 0.75rem;
$btn-padding-medium: 0.5rem 1rem;
$btn-padding-large: 0.75rem 1.5rem;

$btn-font-size-small: 0.875rem;
$btn-font-size-medium: 1rem;
$btn-font-size-large: 1.125rem;

$btn-border-radius: 0.375rem;
$btn-border-width: 1px;
$btn-transition: all 0.2s ease-in-out;

// Breakpoints
$mobile: 768px;
$tablet: 1024px;

// Color palette
$colors: (
  primary: (
    bg: #3b82f6,
    hover: #2563eb,
    text: #ffffff
  ),
  secondary: (
    bg: #6b7280,
    hover: #4b5563,
    text: #ffffff
  ),
  success: (
    bg: #10b981,
    hover: #059669,
    text: #ffffff
  ),
  danger: (
    bg: #ef4444,
    hover: #dc2626,
    text: #ffffff
  ),
  warning: (
    bg: #f59e0b,
    hover: #d97706,
    text: #ffffff
  ),
  info: (
    bg: #06b6d4,
    hover: #0891b2,
    text: #ffffff
  )
);

// Mixins
@mixin button-size($padding, $font-size, $min-height: auto) {
  padding: $padding;
  font-size: $font-size;
  @if $min-height != auto {
    min-height: $min-height;
  }
}

@mixin button-variant($bg-color, $text-color, $hover-color) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $bg-color;

  &:hover:not(&--disabled):not(&--loading) {
    background-color: $hover-color;
    border-color: $hover-color;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba($bg-color, 0.25);
  }

  &:active:not(&--disabled):not(&--loading) {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba($bg-color, 0.15);
  }
}

@mixin focus-ring($color: #3b82f6) {
  outline: 2px solid $color;
  outline-offset: 2px;
  box-shadow: 0 0 0 3px rgba($color, 0.1);
}

// Base button styles
.button-fe-button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 500;
  line-height: 1.5;
  border: $btn-border-width solid transparent;
  border-radius: $btn-border-radius;
  cursor: pointer;
  transition: $btn-transition;
  text-decoration: none;
  background-color: transparent;
  color: inherit;
  position: relative;
  font-family: inherit;
  box-sizing: border-box;

  &:focus {
    @include focus-ring();
  }

  // Size modifiers
  &--small {
    @include button-size($btn-padding-small, $btn-font-size-small, 2rem);
  }

  &--medium {
    @include button-size($btn-padding-medium, $btn-font-size-medium, 2.5rem);
  }

  &--large {
    @include button-size($btn-padding-large, $btn-font-size-large, 3rem);
  }

  // ðŸŽ¨ Custom variant with CSS variables
  &--custom {
    background-color: var(--btn-bg-color, #6f42c1);
    color: var(--btn-text-color, #000000);
    border-color: var(--btn-bg-color, #6f42c1);

    &:hover:not(&--disabled):not(&--loading) {
      background-color: var(--btn-hover-color, #c82333);
      border-color: var(--btn-hover-color, #c82333);
      transform: translateY(-1px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    &:active:not(&--disabled):not(&--loading) {
      transform: translateY(0);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
  }

  // Color variants
  @each $name, $props in $colors {
    &--#{$name} {
      @include button-variant(
        map-get($props, bg),
        map-get($props, text),
        map-get($props, hover)
      );
    }
  }

  // State modifiers
  &--full-width {
    width: 100%;
  }

  &--disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  &--loading {
    color: transparent;
    pointer-events: none;
  }

  // Loading spinner
  &__spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 1rem;
    height: 1rem;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  // Button text
  &__text {
    transition: opacity 0.2s ease-in-out;

    &--hidden {
      opacity: 0;
    }
  }
}

// Animations
@keyframes spin {
  0% { 
    transform: translate(-50%, -50%) rotate(0deg); 
  }
  100% { 
    transform: translate(-50%, -50%) rotate(360deg); 
  }
}

// ðŸŒ™ Dark mode support
@media (prefers-color-scheme: dark) {
  .button-fe-button {
    &:focus {
      @include focus-ring(#60a5fa);
    }
  }
}

// ðŸ“± Mobile responsive adjustments
@media (max-width: $mobile) {
  .button-fe-button {
    min-height: 44px; // iOS accessibility minimum
    
    &--small {
      min-height: 40px;
    }
    
    &--large {
      padding: 1rem 2rem;
      min-height: 48px;
    }
  }
}

// ðŸŽ¯ High contrast mode support
@media (prefers-contrast: high) {
  .button-fe-button {
    border-width: 2px;
    
    &:focus {
      outline-width: 3px;
    }
  }
}

// â™¿ Reduced motion support
@media (prefers-reduced-motion: reduce) {
  .button-fe-button {
    transition: none;
    
    &:hover:not(&--disabled):not(&--loading) {
      transform: none;
    }
    
    &__spinner {
      animation: none;
    }
  }
}
  font-size: $font-size;
}

@mixin button-variant($bg-color, $hover-color, $text-color) {
  background-color: $bg-color;
  border-color: $bg-color;
  color: $text-color;

  &:hover:not(:disabled) {
    background-color: $hover-color;
    border-color: $hover-color;
  }

  &:focus {
    box-shadow: 0 0 0 0.2rem rgba($bg-color, 0.25);
  }
}

@mixin loading-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1rem;
  height: 1rem;
  border: 2px solid currentColor;
  border-top: 2px solid transparent;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

// Base button styles
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 500;
  line-height: 1.5;
  border: $btn-border-width solid transparent;
  border-radius: $btn-border-radius;
  cursor: pointer;
  transition: $btn-transition;
  text-decoration: none;
  background-color: transparent;
  color: inherit;
  position: relative;

  &:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  &:disabled,
  &.btn-disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  // Size variants
  &.btn-small {
    @include button-size($btn-padding-small, $btn-font-size-small);
  }

  &.btn-medium {
    @include button-size($btn-padding-medium, $btn-font-size-medium);
  }

  &.btn-large {
    @include button-size($btn-padding-large, $btn-font-size-large);
  }

  // Color variants
  @each $variant, $color-map in $colors {
    &.btn-#{$variant} {
      @include button-variant(
        map-get($color-map, bg),
        map-get($color-map, hover),
        map-get($color-map, text)
      );
    }
  }

  // Full width
  &.btn-full-width {
    width: 100%;
  }

  // Loading state
  &.btn-loading {
    color: transparent;

    .loading-spinner {
      @include loading-spinner;
    }

    .loading-text {
      opacity: 0;
    }
  }
}

// Animations
@keyframes spin {
  0% { 
    transform: translate(-50%, -50%) rotate(0deg); 
  }
  100% { 
    transform: translate(-50%, -50%) rotate(360deg); 
  }
}
